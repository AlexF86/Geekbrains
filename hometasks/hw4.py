# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу:
# (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

manhours = 0
rate = 0
bonus = 0

try:
    manhours = int(argv[1])
    rate = int(argv[2])
    bonus = int(argv[3])
    print(f'Заработная плата составляет: {manhours * rate + bonus}')

except ValueError:
    print('Введено недопустимое значение')

except IndexError:
    # если пропущены аргументы, то считаем их равными нулю
    print(f'Заработная плата составляет: {manhours * rate + bonus}')


# 2. Представлен список чисел.
# Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.

from random import sample


def comp_prev(lst):
    """Функция - генератор yield, который возвращает текущий элемент списка,
     если он больше предыдущего
    :param lst: список значений
    :return: элемент входного, который больше предыдущего
    """
    for i in range(1, len(lst)):
        try:
            if lst[i] > lst[i - 1]:
                yield lst[i]
        except:
            continue


# Генерируем случайный список десяти чисел от 0 до 100
some_list = sample(range(0, 100), 10)
print(f'Исходный список: {some_list}')

next_grater_lst = [el for el in comp_prev(some_list)]

print(f'Результат: {next_grater_lst}')


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Решите задание в одну строку.

print(f'Числа от 20 до 240 найти числа, кратные 20 или 21:\n{[el for el in range(20, 241) if el%20==0 or el%21==0]}')


# 4. Представлен список чисел.
# Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.

from random import randint

# Генерируем случайный список десяти чисел от 1 до 6 (десять раз бросаем кубик)
tries = [randint(1, 6) for i in range(10)]

print(f'Исходныe: {tries}')
print(f'Уникальные: {[tries[i] for i in range(len(tries)) if tries[i] not in (tries[:i] + tries[i + 1:])]}')


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
#
# Подсказка: использовать функцию reduce().

# [AM's comment: лучше было бы рассчитать сумму всех элементов, так как результат произведения слишком длинный]

from functools import reduce


def multiply(prev_el, el):
    return prev_el * el


print(reduce(multiply, [n for n in range(100, 1001, 2)]))


# 6. Реализовать два небольших скрипта:
#
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
#
# Подсказка: используйте функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Предусмотрите условие его завершения.
#
# Например, в первом задании выводим целые числа, начиная с 3.
# При достижении числа 10 — завершаем цикл.
# Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

from itertools import count, cycle
from random import randint

start_num = int(input('Введите начальное число: '))
end_num = int(input('Введите конечное число: '))

for n in count(start_num):
    if n > end_num:
        break
    else:
        print(n)

# создаем случайный список
some_list = [randint(1, 6) for i in range(5)]
print(f'Вывод элементов списка {some_list} с помощью итератора cycle():')
i = 0
for el in cycle(some_list):
    if i==len(some_list):
        break
    else:
        print(some_list[i])
    i += 1


# 7. Реализовать генератор с помощью функции с ключевым словом yield,
# создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа.
# В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.

def factorial(n):
    """Рекурсивная функция вычисления факториала числа n
    :param n: число, больше или равное 0
    :return: факториал n!
    """
    if n == 0:
        # По определению факториал нуля равен 1
        return 1
    elif n == 1:
        return n
    else:
        return n * factorial(n - 1)


def fact(n):
    """Функция-генератор фактриалов чисел от 1 до n
    :param n: конечное число
    :yield: факториал элемента списка от 1 до n включительно
    """
    for i in range(1, n + 1):
        yield factorial(i)


x = int(input('Расчет последовательности факториалов до числа: '))
print(f'Последовательность факториалов чисел от 1 до {x}:')
print([el for el in fact(x)])